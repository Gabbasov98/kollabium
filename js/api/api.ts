/* tslint:disable */
/* eslint-disable */
/**
 * Laravel Request Docs
 * Laravel Request Docs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequiredError} from './base';

/**
 *
 * @export
 * @interface ApiV1AppConfigsAppConfigPutRequest
 */
export interface ApiV1AppConfigsAppConfigPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'display_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'display_value'?: string | null;
    /**
     *
     * @type {object}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'value'?: object | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsAppConfigPutRequest
     */
    'type'?: string | null;
}

/**
 *
 * @export
 * @interface ApiV1AppConfigsPostRequest
 */
export interface ApiV1AppConfigsPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'display_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'display_value'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'value'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AppConfigsPostRequest
     */
    'type'?: string;
}

/**
 *
 * @export
 * @interface ApiV1AuthEmailVerifyUserPostRequest
 */
export interface ApiV1AuthEmailVerifyUserPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthEmailVerifyUserPostRequest
     */
    'code'?: string;
}

/**
 *
 * @export
 * @interface ApiV1AuthUserRegisterByEmailPostRequest
 */
export interface ApiV1AuthUserRegisterByEmailPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'email'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'nick'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'phone'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'locale'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'password'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'referal_code'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'roles'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByEmailPostRequest
     */
    'roles.*'?: object;
}

/**
 *
 * @export
 * @interface ApiV1AuthUserRegisterByNickPostRequest
 */
export interface ApiV1AuthUserRegisterByNickPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'nick'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'email'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'phone'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'locale'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'password'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'referal_code'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'roles'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByNickPostRequest
     */
    'roles.*'?: object;
}

/**
 *
 * @export
 * @interface ApiV1AuthUserRegisterByPhonePostRequest
 */
export interface ApiV1AuthUserRegisterByPhonePostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'phone'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'nick'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'email'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'locale'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'password'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'referal_code'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'roles'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1AuthUserRegisterByPhonePostRequest
     */
    'roles.*'?: object;
}

/**
 *
 * @export
 * @interface ApiV1CalculationsPostRequest
 */
export interface ApiV1CalculationsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1CalculationsPostRequest
     */
    'amount'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1CalculationsPostRequest
     */
    'coin'?: string;
}

/**
 *
 * @export
 * @interface ApiV1CategoryNewsPostRequest
 */
export interface ApiV1CategoryNewsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1CategoryNewsPostRequest
     */
    'parent_id'?: object | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1CategoryNewsPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1CategoryNewsPostRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1CategoryNewsPostRequest
     */
    'description'?: string | null;
}

/**
 *
 * @export
 * @interface ApiV1CommentsCommentPutRequest
 */
export interface ApiV1CommentsCommentPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1CommentsCommentPutRequest
     */
    'text'?: string;
}

/**
 *
 * @export
 * @interface ApiV1CommentsPostRequest
 */
export interface ApiV1CommentsPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1CommentsPostRequest
     */
    'text'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1CommentsPostRequest
     */
    'target'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1CommentsPostRequest
     */
    'target_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1CommentsPostRequest
     */
    'comment_id'?: object | null;
}

/**
 *
 * @export
 * @interface ApiV1CompaniesCompanyPutRequest
 */
export interface ApiV1CompaniesCompanyPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1CompaniesCompanyPutRequest
     */
    'name'?: string;
    /**
     *
     * @type {Array}
     * @memberof ApiV1CompaniesCompanyPutRequest
     */
    'member_ids'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1CompaniesCompanyPutRequest
     */
    'member_ids.*.id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1CompaniesCompanyPutRequest
     */
    'member_ids.*.role_id'?: object;
}

/**
 *
 * @export
 * @interface ApiV1CompaniesPostRequest
 */
export interface ApiV1CompaniesPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1CompaniesPostRequest
     */
    'name'?: string;
}

/**
 *
 * @export
 * @interface ApiV1FavoritesPostRequest
 */
export interface ApiV1FavoritesPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1FavoritesPostRequest
     */
    'target'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1FavoritesPostRequest
     */
    'target_id'?: object;
}

/**
 *
 * @export
 * @interface ApiV1FilesPostRequest
 */
export interface ApiV1FilesPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1FilesPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1FilesPostRequest
     */
    'file_path'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1FilesPostRequest
     */
    'asset'?: string;
}

/**
 *
 * @export
 * @interface ApiV1LikesPostRequest
 */
export interface ApiV1LikesPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1LikesPostRequest
     */
    'target'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1LikesPostRequest
     */
    'target_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1LikesPostRequest
     */
    'weight'?: object;
}

/**
 *
 * @export
 * @interface ApiV1NewsNewsPutRequest
 */
export interface ApiV1NewsNewsPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'image'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'content'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'wysiwyg'?: boolean | null;
    /**
     *
     * @type {Array}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'category_ids'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'category_ids.*'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'tags'?: Array;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'tags.*.name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'close_comments'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsNewsPutRequest
     */
    'hide_comments'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1NewsPostRequest
 */
export interface ApiV1NewsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1NewsPostRequest
     */
    'news_id'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsPostRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsPostRequest
     */
    'image'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsPostRequest
     */
    'content'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsPostRequest
     */
    'wysiwyg'?: boolean | null;
    /**
     *
     * @type {Array}
     * @memberof ApiV1NewsPostRequest
     */
    'category_ids'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1NewsPostRequest
     */
    'category_ids.*'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1NewsPostRequest
     */
    'tags'?: Array;
    /**
     *
     * @type {string}
     * @memberof ApiV1NewsPostRequest
     */
    'tags.*.name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsPostRequest
     */
    'close_comments'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1NewsPostRequest
     */
    'hide_comments'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1OrdersPostRequest
 */
export interface ApiV1OrdersPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1OrdersPostRequest
     */
    'user_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1OrdersPostRequest
     */
    'plan_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1OrdersPostRequest
     */
    'amount'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1OrdersPostRequest
     */
    'status'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1OrdersPostRequest
     */
    'complete'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1OrdersPostRequest
     */
    'success'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1PlansPlanPutRequest
 */
export interface ApiV1PlansPlanPutRequest {
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PlansPlanPutRequest
     */
    'is_active'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1PostsPostPutRequest
 */
export interface ApiV1PostsPostPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostPutRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostPutRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostPutRequest
     */
    'image'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostPutRequest
     */
    'is_wysiwyg'?: boolean;
    /**
     *
     * @type {object}
     * @memberof ApiV1PostsPostPutRequest
     */
    'reposted_id'?: object | null;
    /**
     *
     * @type {Array}
     * @memberof ApiV1PostsPostPutRequest
     */
    'tags'?: Array;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostPutRequest
     */
    'tags.*.name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostPutRequest
     */
    'close_comments'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostPutRequest
     */
    'hide_comments'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1PostsPostRequest
 */
export interface ApiV1PostsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1PostsPostRequest
     */
    'post_id'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostRequest
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostRequest
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostRequest
     */
    'image'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostRequest
     */
    'is_wysiwyg'?: boolean;
    /**
     *
     * @type {object}
     * @memberof ApiV1PostsPostRequest
     */
    'reposted_id'?: object | null;
    /**
     *
     * @type {Array}
     * @memberof ApiV1PostsPostRequest
     */
    'tags'?: Array;
    /**
     *
     * @type {string}
     * @memberof ApiV1PostsPostRequest
     */
    'tags.*.name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostRequest
     */
    'close_comments'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1PostsPostRequest
     */
    'hide_comments'?: boolean;
}

/**
 *
 * @export
 * @interface ApiV1RatesPostRequest
 */
export interface ApiV1RatesPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1RatesPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1RatesPostRequest
     */
    'description'?: string | null;
    /**
     *
     * @type {object}
     * @memberof ApiV1RatesPostRequest
     */
    'rate'?: object;
}

/**
 *
 * @export
 * @interface ApiV1TagsDeleteRequest
 */
export interface ApiV1TagsDeleteRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1TagsDeleteRequest
     */
    'target'?: object | null;
    /**
     *
     * @type {number}
     * @memberof ApiV1TagsDeleteRequest
     */
    'target_id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1TagsDeleteRequest
     */
    'tag'?: string | null;
}

/**
 *
 * @export
 * @interface ApiV1TagsPostRequest
 */
export interface ApiV1TagsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1TagsPostRequest
     */
    'target'?: object;
    /**
     *
     * @type {number}
     * @memberof ApiV1TagsPostRequest
     */
    'target_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1TagsPostRequest
     */
    'tag'?: string;
}

/**
 *
 * @export
 * @interface ApiV1TransactionsPostRequest
 */
export interface ApiV1TransactionsPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1TransactionsPostRequest
     */
    'user_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1TransactionsPostRequest
     */
    'wallet_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1TransactionsPostRequest
     */
    'amount'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1TransactionsPostRequest
     */
    'payload'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1TransactionsPostRequest
     */
    'decimal_payload'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1TransactionsPostRequest
     */
    'coin'?: string;
}

/**
 *
 * @export
 * @interface ApiV1UploadFilePostRequest
 */
export interface ApiV1UploadFilePostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1UploadFilePostRequest
     */
    'file'?: object;
}

/**
 *
 * @export
 * @interface ApiV1UserInformationHeadersPostRequest
 */
export interface ApiV1UserInformationHeadersPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationHeadersPostRequest
     */
    'header_id'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersPostRequest
     */
    'system_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersPostRequest
     */
    'type'?: string;
}

/**
 *
 * @export
 * @interface ApiV1UserInformationHeadersUserInformationHeaderPutRequest
 */
export interface ApiV1UserInformationHeadersUserInformationHeaderPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersUserInformationHeaderPutRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersUserInformationHeaderPutRequest
     */
    'system_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1UserInformationHeadersUserInformationHeaderPutRequest
     */
    'type'?: string;
}

/**
 *
 * @export
 * @interface ApiV1UserInformationPostRequest
 */
export interface ApiV1UserInformationPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationPostRequest
     */
    'user_information_header_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationPostRequest
     */
    'user_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationPostRequest
     */
    'value'?: object;
}

/**
 *
 * @export
 * @interface ApiV1UserInformationUpsertPostRequest
 */
export interface ApiV1UserInformationUpsertPostRequest {
    /**
     *
     * @type {Array}
     * @memberof ApiV1UserInformationUpsertPostRequest
     */
    'records'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationUpsertPostRequest
     */
    'records.*.user_information_header_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationUpsertPostRequest
     */
    'records.*.system_name'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationUpsertPostRequest
     */
    'records.*.user_id'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UserInformationUpsertPostRequest
     */
    'records.*.value'?: object;
}

/**
 *
 * @export
 * @interface ApiV1UsersPostRequest
 */
export interface ApiV1UsersPostRequest {
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'nick'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'email'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'phone'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'locale'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1UsersPostRequest
     */
    'password'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'referal_code'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'login'?: object;
    /**
     *
     * @type {Array}
     * @memberof ApiV1UsersPostRequest
     */
    'roles'?: Array;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersPostRequest
     */
    'roles.*'?: object;
}

/**
 *
 * @export
 * @interface ApiV1UsersUserPutRequest
 */
export interface ApiV1UsersUserPutRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1UsersUserPutRequest
     */
    'nick'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersUserPutRequest
     */
    'email'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersUserPutRequest
     */
    'phone'?: object;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersUserPutRequest
     */
    'locale'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiV1UsersUserPutRequest
     */
    'password'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiV1UsersUserPutRequest
     */
    'referal_code'?: object;
}

/**
 *
 * @export
 * @interface ApiV1WalletsPostRequest
 */
export interface ApiV1WalletsPostRequest {
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsPostRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsPostRequest
     */
    'address'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsPostRequest
     */
    'mnemonic'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1WalletsPostRequest
     */
    'in_work'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1WalletsPostRequest
     */
    'generated'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AllcommentsGet: async (page: number, perPage: number, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1AllcommentsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1AllcommentsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/allcomments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/appConfigs/{appConfig}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/appConfigs/{appConfig}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AppConfigsAppConfigPutRequest} [apiV1AppConfigsAppConfigPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigPut: async (apiV1AppConfigsAppConfigPutRequest?: ApiV1AppConfigsAppConfigPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/appConfigs/{appConfig}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AppConfigsAppConfigPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/appConfigs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AppConfigsPostRequest} [apiV1AppConfigsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsPost: async (apiV1AppConfigsPostRequest?: ApiV1AppConfigsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/appConfigs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AppConfigsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailResendPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/email/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerifyUserPost: async (apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/email/verify/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthEmailVerifyUserPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Авторизация по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthMeGet: async (withUserInformation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withUserInformation !== undefined) {
                localVarQueryParameter['with_user_information'] = withUserInformation;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Отправка ссылки на восстановление пароля
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPasswordEmailPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/password/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPasswordResetPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneResendPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/phone/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneVerifyUserPost: async (apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/phone/verify/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthEmailVerifyUserPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Авторизация пользователей в мобильном приложении по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserLoginPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user_login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserLogoutPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user_logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Регистрация пользователей через мобильное приложение по почте и паролю. Для регистрации пользователя по реферальной ссылке, необходимо в параметр \'apliner\' передать email пользователя, который приглашает. ## ....
         * @param {ApiV1AuthUserRegisterByEmailPostRequest} [apiV1AuthUserRegisterByEmailPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByEmailPost: async (apiV1AuthUserRegisterByEmailPostRequest?: ApiV1AuthUserRegisterByEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user_register_by_email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUserRegisterByEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByNickPostRequest} [apiV1AuthUserRegisterByNickPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByNickPost: async (apiV1AuthUserRegisterByNickPostRequest?: ApiV1AuthUserRegisterByNickPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user_register_by_nick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUserRegisterByNickPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByPhonePostRequest} [apiV1AuthUserRegisterByPhonePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByPhonePost: async (apiV1AuthUserRegisterByPhonePostRequest?: ApiV1AuthUserRegisterByPhonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user_register_by_phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUserRegisterByPhonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/calculations/{calculation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/calculations/{calculation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationPut: async (apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/calculations/{calculation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CalculationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/calculations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsPost: async (apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/calculations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CalculationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/category_news/{category_news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/category_news/{category_news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsPut: async (apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/category_news/{category_news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CategoryNewsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [title] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsGet: async (page: number, perPage: number, name?: string, title?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1CategoryNewsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1CategoryNewsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/category_news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsPost: async (apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/category_news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CategoryNewsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/comments/{comment}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/comments/{comment}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CommentsCommentPutRequest} [apiV1CommentsCommentPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentPut: async (apiV1CommentsCommentPutRequest?: ApiV1CommentsCommentPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/comments/{comment}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentsCommentPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} target required|in:news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [text] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsGet: async (target: object, targetId: object, page: number, perPage: number, text?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('apiV1CommentsGet', 'target', target)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('apiV1CommentsGet', 'targetId', targetId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1CommentsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1CommentsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CommentsPostRequest} [apiV1CommentsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsPost: async (apiV1CommentsPostRequest?: ApiV1CommentsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companies/{company}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companies/{company}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesCompanyPutRequest} [apiV1CompaniesCompanyPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyPut: async (apiV1CompaniesCompanyPutRequest?: ApiV1CompaniesCompanyPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companies/{company}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesCompanyPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesGet: async (page: number, perPage: number, name?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1CompaniesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1CompaniesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesPost: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRoleDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companyRoles/{companyRole}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRoleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companyRoles/{companyRole}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRolePut: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companyRoles/{companyRole}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesGet: async (page: number, perPage: number, name?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1CompanyRolesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1CompanyRolesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/companyRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesPost: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companyRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Удаляет избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesFavoriteDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/favorites/{favorite}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по избранному  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesGet: async (target: object, targetId: object, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('apiV1FavoritesGet', 'target', target)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('apiV1FavoritesGet', 'targetId', targetId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1FavoritesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1FavoritesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Создает избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesPost: async (apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FavoritesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFileDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files/{file}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFileGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files/{file}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFilePut: async (apiV1FilesPostRequest?: ApiV1FilesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files/{file}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FilesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesPost: async (apiV1FilesPostRequest?: ApiV1FilesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FilesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Удаляет подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsFollowDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/follows/{follow}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по подпискам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsGet: async (target: object, targetId: object, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('apiV1FollowsGet', 'target', target)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('apiV1FollowsGet', 'targetId', targetId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1FollowsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1FollowsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Создает подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsPost: async (apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FavoritesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetUserFeaturesUsageUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/getUserFeaturesUsage/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesGet: async (page: number, perPage: number, name?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1LanguagesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1LanguagesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguageDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/languages/{language}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguageGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/languages/{language}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguagePut: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/languages/{language}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesPost: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по лайкам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesGet: async (target: object, targetId: object, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('apiV1LikesGet', 'target', target)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('apiV1LikesGet', 'targetId', targetId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1LikesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1LikesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Удаляет лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesLikeDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/likes/{like}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Ставит лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1LikesPostRequest} [apiV1LikesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesPost: async (apiV1LikesPostRequest?: ApiV1LikesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1LikesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MakeOrderPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/MakeOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по избранному пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyFavoritesGet: async (page: number, perPage: number, target?: object, targetId?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1MyFavoritesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1MyFavoritesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/myFavorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyFollowsGet: async (page: number, perPage: number, target?: object, targetId?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1MyFollowsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1MyFollowsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/myFollows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyLikesGet: async (page: number, perPage: number, target?: object, targetId?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1MyLikesGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1MyLikesGet', 'perPage', perPage)
            const localVarPath = `/api/v1/myLikes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsGet: async (page: number, pageSize: number, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1NewsGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiV1NewsGet', 'pageSize', pageSize)
            const localVarPath = `/api/v1/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/news/{news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/news/{news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1NewsNewsPutRequest} [apiV1NewsNewsPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsPut: async (apiV1NewsNewsPutRequest?: ApiV1NewsNewsPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/news/{news}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1NewsNewsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1NewsPostRequest} [apiV1NewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsPost: async (apiV1NewsPostRequest?: ApiV1NewsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1NewsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/orders/{order}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/orders/{order}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderPut: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/orders/{order}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1OrdersPostRequest} [apiV1OrdersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPost: async (apiV1OrdersPostRequest?: ApiV1OrdersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrdersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plans/{plan}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plans/{plan}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1PlansPlanPutRequest} [apiV1PlansPlanPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanPut: async (apiV1PlansPlanPutRequest?: ApiV1PlansPlanPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plans/{plan}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PlansPlanPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPost: async (apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CompaniesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsGet: async (page: number, perPage: number, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1PostsGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1PostsGet', 'perPage', perPage)
            const localVarPath = `/api/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1PostsPostRequest} [apiV1PostsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPost: async (apiV1PostsPostRequest?: ApiV1PostsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/posts/{post}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [languageId] filled|int
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostGet: async (languageId?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/posts/{post}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (languageId !== undefined) {
                localVarQueryParameter['language_id'] = languageId;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1PostsPostPutRequest} [apiV1PostsPostPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostPut: async (apiV1PostsPostPutRequest?: ApiV1PostsPostPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/posts/{post}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostsPostPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesPost: async (apiV1RatesPostRequest?: ApiV1RatesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1RatesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRateDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rates/{rate}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rates/{rate}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRatePut: async (apiV1RatesPostRequest?: ApiV1RatesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rates/{rate}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1RatesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Редактирование профиля пользователя ## ....
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsProfilePatch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/settings/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1TagsDeleteRequest} [apiV1TagsDeleteRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsDelete: async (apiV1TagsDeleteRequest?: ApiV1TagsDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1TagsDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [target] filled|in:news,post
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsGet: async (target?: object, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1TagsPostRequest} [apiV1TagsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsPost: async (apiV1TagsPostRequest?: ApiV1TagsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1TagsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsPost: async (apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1TransactionsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions/{transaction}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions/{transaction}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionPut: async (apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions/{transaction}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1TransactionsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UploadFilePostRequest} [apiV1UploadFilePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UploadFilePost: async (apiV1UploadFilePostRequest?: ApiV1UploadFilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/upload-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UploadFilePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [value] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationGet: async (page: number, perPage: number, value?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1UserInformationGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1UserInformationGet', 'perPage', perPage)
            const localVarPath = `/api/v1/userInformation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [systemName] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersGet: async (page: number, perPage: number, name?: string, systemName?: string, search?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1UserInformationHeadersGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1UserInformationHeadersGet', 'perPage', perPage)
            const localVarPath = `/api/v1/userInformationHeaders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (systemName !== undefined) {
                localVarQueryParameter['system_name'] = systemName;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersPostRequest} [apiV1UserInformationHeadersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersPost: async (apiV1UserInformationHeadersPostRequest?: ApiV1UserInformationHeadersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformationHeaders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserInformationHeadersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformationHeaders/{userInformationHeader}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformationHeaders/{userInformationHeader}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersUserInformationHeaderPutRequest} [apiV1UserInformationHeadersUserInformationHeaderPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderPut: async (apiV1UserInformationHeadersUserInformationHeaderPutRequest?: ApiV1UserInformationHeadersUserInformationHeaderPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformationHeaders/{userInformationHeader}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserInformationHeadersUserInformationHeaderPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationPost: async (apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserInformationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UserInformationUpsertPostRequest} [apiV1UserInformationUpsertPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUpsertPost: async (apiV1UserInformationUpsertPostRequest?: ApiV1UserInformationUpsertPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformation/upsert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserInformationUpsertPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformation/{userInformation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformation/{userInformation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationPut: async (apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userInformation/{userInformation}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserInformationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptCancelPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userSubscriptCancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userSubscript`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptRenewPost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userSubscriptRenew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGet: async (page: number, perPage: number, search?: string, withUserInformation?: boolean, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1UsersGet', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('apiV1UsersGet', 'perPage', perPage)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (withUserInformation !== undefined) {
                localVarQueryParameter['with_user_information'] = withUserInformation;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UsersPostRequest} [apiV1UsersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersPost: async (apiV1UsersPostRequest?: ApiV1UsersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UsersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserGet: async (withUserInformation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withUserInformation !== undefined) {
                localVarQueryParameter['with_user_information'] = withUserInformation;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1UsersUserPutRequest} [apiV1UsersUserPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserPut: async (apiV1UsersUserPutRequest?: ApiV1UsersUserPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/{user}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UsersUserPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} sortBy required|string
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsGet: async (sortBy: string, page: number, pageSize: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sortBy' is not null or undefined
            assertParamExists('apiV1WalletsGet', 'sortBy', sortBy)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiV1WalletsGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiV1WalletsGet', 'pageSize', pageSize)
            const localVarPath = `/api/v1/wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsPost: async (apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WalletsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletDelete: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wallets/{wallet}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wallets/{wallet}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletPut: async (apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wallets/{wallet}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WalletsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AllcommentsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AllcommentsGet(page, perPage, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AppConfigsAppConfigDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AppConfigsAppConfigDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AppConfigsAppConfigGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AppConfigsAppConfigGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AppConfigsAppConfigPutRequest} [apiV1AppConfigsAppConfigPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest?: ApiV1AppConfigsAppConfigPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AppConfigsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AppConfigsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AppConfigsPostRequest} [apiV1AppConfigsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AppConfigsPost(apiV1AppConfigsPostRequest?: ApiV1AppConfigsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AppConfigsPost(apiV1AppConfigsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthEmailResendPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthEmailResendPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Авторизация по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLoginPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthMeGet(withUserInformation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthMeGet(withUserInformation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Отправка ссылки на восстановление пароля
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthPasswordEmailPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordEmailPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthPasswordResetPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthPhoneResendPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPhoneResendPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Авторизация пользователей в мобильном приложении по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUserLoginPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUserLoginPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUserLogoutPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUserLogoutPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Регистрация пользователей через мобильное приложение по почте и паролю. Для регистрации пользователя по реферальной ссылке, необходимо в параметр \'apliner\' передать email пользователя, который приглашает. ## ....
         * @param {ApiV1AuthUserRegisterByEmailPostRequest} [apiV1AuthUserRegisterByEmailPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest?: ApiV1AuthUserRegisterByEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByNickPostRequest} [apiV1AuthUserRegisterByNickPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest?: ApiV1AuthUserRegisterByNickPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByPhonePostRequest} [apiV1AuthUserRegisterByPhonePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest?: ApiV1AuthUserRegisterByPhonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CalculationsCalculationDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CalculationsCalculationDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CalculationsCalculationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CalculationsCalculationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CalculationsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CalculationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CalculationsPost(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CalculationsPost(apiV1CalculationsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryNewsCategoryNewsDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryNewsCategoryNewsDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryNewsCategoryNewsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryNewsCategoryNewsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [title] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryNewsGet(page: number, perPage: number, name?: string, title?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryNewsGet(page, perPage, name, title, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentsCommentDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentsCommentDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentsCommentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentsCommentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CommentsCommentPutRequest} [apiV1CommentsCommentPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest?: ApiV1CommentsCommentPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} target required|in:news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [text] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentsGet(target: object, targetId: object, page: number, perPage: number, text?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentsGet(target, targetId, page, perPage, text, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CommentsPostRequest} [apiV1CommentsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentsPost(apiV1CommentsPostRequest?: ApiV1CommentsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentsPost(apiV1CommentsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompaniesCompanyDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompaniesCompanyDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompaniesCompanyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompaniesCompanyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesCompanyPutRequest} [apiV1CompaniesCompanyPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest?: ApiV1CompaniesCompanyPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompaniesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompaniesGet(page, perPage, name, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompaniesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompaniesPost(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompanyRolesCompanyRoleDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompanyRolesCompanyRoleDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompanyRolesCompanyRoleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompanyRolesCompanyRoleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompanyRolesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompanyRolesGet(page, perPage, name, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CompanyRolesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CompanyRolesPost(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Удаляет избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FavoritesFavoriteDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FavoritesFavoriteDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по избранному  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FavoritesGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FavoritesGet(target, targetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Создает избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FavoritesPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FavoritesPost(apiV1FavoritesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilesFileDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilesFileDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilesFileGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilesFileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilesFilePut(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilesFilePut(apiV1FilesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FilesPost(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FilesPost(apiV1FilesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Удаляет подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FollowsFollowDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FollowsFollowDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по подпискам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FollowsGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FollowsGet(target, targetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Создает подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FollowsPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FollowsPost(apiV1FavoritesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GetUserFeaturesUsageUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetUserFeaturesUsageUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LanguagesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LanguagesGet(page, perPage, name, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LanguagesLanguageDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LanguagesLanguageDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LanguagesLanguageGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LanguagesLanguageGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LanguagesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LanguagesPost(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по лайкам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LikesGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LikesGet(target, targetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Удаляет лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LikesLikeDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LikesLikeDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Ставит лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1LikesPostRequest} [apiV1LikesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LikesPost(apiV1LikesPostRequest?: ApiV1LikesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LikesPost(apiV1LikesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MakeOrderPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MakeOrderPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по избранному пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MyFavoritesGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MyFavoritesGet(page, perPage, target, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MyFollowsGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MyFollowsGet(page, perPage, target, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MyLikesGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MyLikesGet(page, perPage, target, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NewsGet(page: number, pageSize: number, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NewsGet(page, pageSize, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NewsNewsDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NewsNewsDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NewsNewsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NewsNewsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1NewsNewsPutRequest} [apiV1NewsNewsPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NewsNewsPut(apiV1NewsNewsPutRequest?: ApiV1NewsNewsPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NewsNewsPut(apiV1NewsNewsPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1NewsPostRequest} [apiV1NewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NewsPost(apiV1NewsPostRequest?: ApiV1NewsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NewsPost(apiV1NewsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersOrderDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersOrderDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersOrderGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersOrderGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersOrderPut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersOrderPut(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1OrdersPostRequest} [apiV1OrdersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersPost(apiV1OrdersPostRequest?: ApiV1OrdersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersPost(apiV1OrdersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlansGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PlansGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlansPlanDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PlansPlanDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlansPlanGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PlansPlanGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1PlansPlanPutRequest} [apiV1PlansPlanPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlansPlanPut(apiV1PlansPlanPutRequest?: ApiV1PlansPlanPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PlansPlanPut(apiV1PlansPlanPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlansPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PlansPost(apiV1CompaniesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsGet(page, perPage, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1PostsPostRequest} [apiV1PostsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostsPost(apiV1PostsPostRequest?: ApiV1PostsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsPost(apiV1PostsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostsPostDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsPostDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [languageId] filled|int
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostsPostGet(languageId?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsPostGet(languageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1PostsPostPutRequest} [apiV1PostsPostPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostsPostPut(apiV1PostsPostPutRequest?: ApiV1PostsPostPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsPostPut(apiV1PostsPostPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RatesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RatesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RatesPost(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RatesPost(apiV1RatesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RatesRateDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RatesRateDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RatesRateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RatesRateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RatesRatePut(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RatesRatePut(apiV1RatesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Редактирование профиля пользователя ## ....
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsProfilePatch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SettingsProfilePatch(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1TagsDeleteRequest} [apiV1TagsDeleteRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagsDelete(apiV1TagsDeleteRequest?: ApiV1TagsDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TagsDelete(apiV1TagsDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [target] filled|in:news,post
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagsGet(target?: object, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TagsGet(target, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1TagsPostRequest} [apiV1TagsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TagsPost(apiV1TagsPostRequest?: ApiV1TagsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TagsPost(apiV1TagsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TransactionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TransactionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TransactionsPost(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TransactionsPost(apiV1TransactionsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TransactionsTransactionDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TransactionsTransactionDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TransactionsTransactionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TransactionsTransactionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UploadFilePostRequest} [apiV1UploadFilePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UploadFilePost(apiV1UploadFilePostRequest?: ApiV1UploadFilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UploadFilePost(apiV1UploadFilePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [value] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationGet(page: number, perPage: number, value?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationGet(page, perPage, value, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [systemName] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationHeadersGet(page: number, perPage: number, name?: string, systemName?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationHeadersGet(page, perPage, name, systemName, search, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersPostRequest} [apiV1UserInformationHeadersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest?: ApiV1UserInformationHeadersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationHeadersUserInformationHeaderDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationHeadersUserInformationHeaderDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationHeadersUserInformationHeaderGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationHeadersUserInformationHeaderGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersUserInformationHeaderPutRequest} [apiV1UserInformationHeadersUserInformationHeaderPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest?: ApiV1UserInformationHeadersUserInformationHeaderPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationPost(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationPost(apiV1UserInformationPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UserInformationUpsertPostRequest} [apiV1UserInformationUpsertPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest?: ApiV1UserInformationUpsertPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationUserInformationDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationUserInformationDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationUserInformationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationUserInformationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserSubscriptCancelPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserSubscriptCancelPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserSubscriptPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserSubscriptPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserSubscriptRenewPost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserSubscriptRenewPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersGet(page: number, perPage: number, search?: string, withUserInformation?: boolean, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersGet(page, perPage, search, withUserInformation, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UsersPostRequest} [apiV1UsersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersPost(apiV1UsersPostRequest?: ApiV1UsersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersPost(apiV1UsersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersUserDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersUserDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersUserGet(withUserInformation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersUserGet(withUserInformation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1UsersUserPutRequest} [apiV1UsersUserPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersUserPut(apiV1UsersUserPutRequest?: ApiV1UsersUserPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UsersUserPut(apiV1UsersUserPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} sortBy required|string
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WalletsGet(sortBy: string, page: number, pageSize: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WalletsGet(sortBy, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WalletsPost(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WalletsPost(apiV1WalletsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WalletsWalletDelete(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WalletsWalletDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WalletsWalletGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WalletsWalletGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WalletsWalletPut(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WalletsWalletPut(apiV1WalletsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AllcommentsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AllcommentsGet(page, perPage, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AppConfigsAppConfigDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AppConfigsAppConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AppConfigsAppConfigPutRequest} [apiV1AppConfigsAppConfigPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest?: ApiV1AppConfigsAppConfigPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AppConfigsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AppConfigsPostRequest} [apiV1AppConfigsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AppConfigsPost(apiV1AppConfigsPostRequest?: ApiV1AppConfigsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AppConfigsPost(apiV1AppConfigsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailResendPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthEmailResendPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Авторизация по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthLoginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthLogoutPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthMeGet(withUserInformation?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthMeGet(withUserInformation, options).then((request) => request(axios, basePath));
        },
        /**
         * Отправка ссылки на восстановление пароля
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPasswordEmailPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthPasswordEmailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPasswordResetPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthPasswordResetPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneResendPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthPhoneResendPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Авторизация пользователей в мобильном приложении по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserLoginPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthUserLoginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Удаление токена доступа
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserLogoutPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthUserLogoutPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Регистрация пользователей через мобильное приложение по почте и паролю. Для регистрации пользователя по реферальной ссылке, необходимо в параметр \'apliner\' передать email пользователя, который приглашает. ## ....
         * @param {ApiV1AuthUserRegisterByEmailPostRequest} [apiV1AuthUserRegisterByEmailPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest?: ApiV1AuthUserRegisterByEmailPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByNickPostRequest} [apiV1AuthUserRegisterByNickPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest?: ApiV1AuthUserRegisterByNickPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1AuthUserRegisterByPhonePostRequest} [apiV1AuthUserRegisterByPhonePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest?: ApiV1AuthUserRegisterByPhonePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CalculationsCalculationDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CalculationsCalculationGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CalculationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CalculationsPost(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CalculationsPost(apiV1CalculationsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CategoryNewsCategoryNewsDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CategoryNewsCategoryNewsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [title] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsGet(page: number, perPage: number, name?: string, title?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CategoryNewsGet(page, perPage, name, title, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CommentsCommentDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CommentsCommentGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CommentsCommentPutRequest} [apiV1CommentsCommentPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest?: ApiV1CommentsCommentPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} target required|in:news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [text] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsGet(target: object, targetId: object, page: number, perPage: number, text?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CommentsGet(target, targetId, page, perPage, text, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CommentsPostRequest} [apiV1CommentsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentsPost(apiV1CommentsPostRequest?: ApiV1CommentsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CommentsPost(apiV1CommentsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompaniesCompanyDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompaniesCompanyGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesCompanyPutRequest} [apiV1CompaniesCompanyPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest?: ApiV1CompaniesCompanyPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompaniesGet(page, perPage, name, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompaniesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompaniesPost(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRoleDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompanyRolesCompanyRoleDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRoleGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompanyRolesCompanyRoleGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompanyRolesGet(page, perPage, name, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CompanyRolesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1CompanyRolesPost(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  Удаляет избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesFavoriteDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FavoritesFavoriteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по избранному  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesGet(target: object, targetId: object, page: number, perPage: number, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FavoritesGet(target, targetId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         *  Создает избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FavoritesPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FavoritesPost(apiV1FavoritesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFileDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FilesFileDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFileGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FilesFileGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesFilePut(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FilesFilePut(apiV1FilesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FilesPost(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FilesPost(apiV1FilesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  Удаляет подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsFollowDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FollowsFollowDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по подпискам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsGet(target: object, targetId: object, page: number, perPage: number, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FollowsGet(target, targetId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         *  Создает подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FollowsPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1FollowsPost(apiV1FavoritesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetUserFeaturesUsageUserGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1GetUserFeaturesUsageUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LanguagesGet(page, perPage, name, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguageDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LanguagesLanguageDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguageGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LanguagesLanguageGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LanguagesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LanguagesPost(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по лайкам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} target required|in:company,news,post,project
         * @param {object} targetId required|int|min:1
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesGet(target: object, targetId: object, page: number, perPage: number, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LikesGet(target, targetId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         *  Удаляет лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesLikeDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LikesLikeDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *  Ставит лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {ApiV1LikesPostRequest} [apiV1LikesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LikesPost(apiV1LikesPostRequest?: ApiV1LikesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1LikesPost(apiV1LikesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MakeOrderPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1MakeOrderPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по избранному пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyFavoritesGet(page: number, perPage: number, target?: object, targetId?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1MyFavoritesGet(page, perPage, target, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyFollowsGet(page: number, perPage: number, target?: object, targetId?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1MyFollowsGet(page, perPage, target, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {object} [target] filled|in:company,news,post,project
         * @param {object} [targetId] exclude_without:target|int|min:1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MyLikesGet(page: number, perPage: number, target?: object, targetId?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1MyLikesGet(page, perPage, target, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsGet(page: number, pageSize: number, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1NewsGet(page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1NewsNewsDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1NewsNewsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1NewsNewsPutRequest} [apiV1NewsNewsPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsNewsPut(apiV1NewsNewsPutRequest?: ApiV1NewsNewsPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1NewsNewsPut(apiV1NewsNewsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1NewsPostRequest} [apiV1NewsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NewsPost(apiV1NewsPostRequest?: ApiV1NewsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1NewsPost(apiV1NewsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1OrdersGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1OrdersOrderDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1OrdersOrderGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderPut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1OrdersOrderPut(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1OrdersPostRequest} [apiV1OrdersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPost(apiV1OrdersPostRequest?: ApiV1OrdersPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1OrdersPost(apiV1OrdersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PlansGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PlansPlanDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PlansPlanGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1PlansPlanPutRequest} [apiV1PlansPlanPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPlanPut(apiV1PlansPlanPutRequest?: ApiV1PlansPlanPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PlansPlanPut(apiV1PlansPlanPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlansPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PlansPost(apiV1CompaniesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PostsGet(page, perPage, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1PostsPostRequest} [apiV1PostsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPost(apiV1PostsPostRequest?: ApiV1PostsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PostsPost(apiV1PostsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PostsPostDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [languageId] filled|int
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostGet(languageId?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PostsPostGet(languageId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1PostsPostPutRequest} [apiV1PostsPostPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostsPostPut(apiV1PostsPostPutRequest?: ApiV1PostsPostPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1PostsPostPut(apiV1PostsPostPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1RatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesPost(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1RatesPost(apiV1RatesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRateDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1RatesRateDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRateGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1RatesRateGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RatesRatePut(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1RatesRatePut(apiV1RatesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Редактирование профиля пользователя ## ....
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsProfilePatch(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1SettingsProfilePatch(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1TagsDeleteRequest} [apiV1TagsDeleteRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsDelete(apiV1TagsDeleteRequest?: ApiV1TagsDeleteRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TagsDelete(apiV1TagsDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [target] filled|in:news,post
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsGet(target?: object, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TagsGet(target, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1TagsPostRequest} [apiV1TagsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TagsPost(apiV1TagsPostRequest?: ApiV1TagsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TagsPost(apiV1TagsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TransactionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsPost(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TransactionsPost(apiV1TransactionsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TransactionsTransactionDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TransactionsTransactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UploadFilePostRequest} [apiV1UploadFilePostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UploadFilePost(apiV1UploadFilePostRequest?: ApiV1UploadFilePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UploadFilePost(apiV1UploadFilePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [value] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationGet(page: number, perPage: number, value?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationGet(page, perPage, value, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [name] filled|string
         * @param {string} [systemName] filled|string
         * @param {string} [search] nullable|string
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersGet(page: number, perPage: number, name?: string, systemName?: string, search?: string, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationHeadersGet(page, perPage, name, systemName, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersPostRequest} [apiV1UserInformationHeadersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest?: ApiV1UserInformationHeadersPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationHeadersUserInformationHeaderDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationHeadersUserInformationHeaderGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UserInformationHeadersUserInformationHeaderPutRequest} [apiV1UserInformationHeadersUserInformationHeaderPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest?: ApiV1UserInformationHeadersUserInformationHeaderPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationPost(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationPost(apiV1UserInformationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UserInformationUpsertPostRequest} [apiV1UserInformationUpsertPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest?: ApiV1UserInformationUpsertPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationUserInformationDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationUserInformationGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptCancelPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserSubscriptCancelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserSubscriptPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserSubscriptRenewPost(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UserSubscriptRenewPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} page required|integer
         * @param {number} perPage required|integer
         * @param {string} [search] nullable|string
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {string} [sortBy] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGet(page: number, perPage: number, search?: string, withUserInformation?: boolean, sortBy?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UsersGet(page, perPage, search, withUserInformation, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UsersPostRequest} [apiV1UsersPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersPost(apiV1UsersPostRequest?: ApiV1UsersPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UsersPost(apiV1UsersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UsersUserDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {boolean} [withUserInformation] filled|boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserGet(withUserInformation?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UsersUserGet(withUserInformation, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1UsersUserPutRequest} [apiV1UsersUserPutRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersUserPut(apiV1UsersUserPutRequest?: ApiV1UsersUserPutRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1UsersUserPut(apiV1UsersUserPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} sortBy required|string
         * @param {number} page required|integer
         * @param {number} pageSize required|integer
         * @param {string} [search] nullable|string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsGet(sortBy: string, page: number, pageSize: number, search?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1WalletsGet(sortBy, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsPost(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1WalletsPost(apiV1WalletsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {object} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletDelete(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1WalletsWalletDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletGet(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1WalletsWalletGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WalletsWalletPut(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1WalletsWalletPut(apiV1WalletsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AllcommentsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AllcommentsGet(page, perPage, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AppConfigsAppConfigDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AppConfigsAppConfigDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AppConfigsAppConfigGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AppConfigsAppConfigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AppConfigsAppConfigPutRequest} [apiV1AppConfigsAppConfigPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest?: ApiV1AppConfigsAppConfigPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AppConfigsAppConfigPut(apiV1AppConfigsAppConfigPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AppConfigsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AppConfigsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AppConfigsPostRequest} [apiV1AppConfigsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AppConfigsPost(apiV1AppConfigsPostRequest?: ApiV1AppConfigsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AppConfigsPost(apiV1AppConfigsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthEmailResendPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthEmailResendPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthEmailVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Авторизация по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLoginPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLoginPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Удаление токена доступа
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {boolean} [withUserInformation] filled|boolean
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthMeGet(withUserInformation?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthMeGet(withUserInformation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Отправка ссылки на восстановление пароля
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthPasswordEmailPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthPasswordEmailPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthPasswordResetPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthPasswordResetPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthPhoneResendPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthPhoneResendPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AuthEmailVerifyUserPostRequest} [apiV1AuthEmailVerifyUserPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest?: ApiV1AuthEmailVerifyUserPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthPhoneVerifyUserPost(apiV1AuthEmailVerifyUserPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Авторизация пользователей в мобильном приложении по почте и паролю ## При успешной авторизации возвращает токен доступа ## Токен используется в заголовках (\"Authorization\": \"Bearer {token}\") для доступа к API ## Параметр device_name служит для определения какому типу приложения был выдан токен (мобильное, веб, или еще что то)
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUserLoginPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUserLoginPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Удаление токена доступа
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUserLogoutPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUserLogoutPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Регистрация пользователей через мобильное приложение по почте и паролю. Для регистрации пользователя по реферальной ссылке, необходимо в параметр \'apliner\' передать email пользователя, который приглашает. ## ....
     * @param {ApiV1AuthUserRegisterByEmailPostRequest} [apiV1AuthUserRegisterByEmailPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest?: ApiV1AuthUserRegisterByEmailPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUserRegisterByEmailPost(apiV1AuthUserRegisterByEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AuthUserRegisterByNickPostRequest} [apiV1AuthUserRegisterByNickPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest?: ApiV1AuthUserRegisterByNickPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUserRegisterByNickPost(apiV1AuthUserRegisterByNickPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1AuthUserRegisterByPhonePostRequest} [apiV1AuthUserRegisterByPhonePostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest?: ApiV1AuthUserRegisterByPhonePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUserRegisterByPhonePost(apiV1AuthUserRegisterByPhonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CalculationsCalculationDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CalculationsCalculationDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CalculationsCalculationGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CalculationsCalculationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CalculationsCalculationPut(apiV1CalculationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CalculationsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CalculationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CalculationsPostRequest} [apiV1CalculationsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CalculationsPost(apiV1CalculationsPostRequest?: ApiV1CalculationsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CalculationsPost(apiV1CalculationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CategoryNewsCategoryNewsDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CategoryNewsCategoryNewsDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CategoryNewsCategoryNewsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CategoryNewsCategoryNewsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CategoryNewsCategoryNewsPut(apiV1CategoryNewsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [name] filled|string
     * @param {string} [title] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CategoryNewsGet(page: number, perPage: number, name?: string, title?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CategoryNewsGet(page, perPage, name, title, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CategoryNewsPostRequest} [apiV1CategoryNewsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest?: ApiV1CategoryNewsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CategoryNewsPost(apiV1CategoryNewsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentsCommentDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentsCommentDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentsCommentGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentsCommentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CommentsCommentPutRequest} [apiV1CommentsCommentPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest?: ApiV1CommentsCommentPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentsCommentPut(apiV1CommentsCommentPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} target required|in:news,post,project
     * @param {object} targetId required|int|min:1
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [text] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentsGet(target: object, targetId: object, page: number, perPage: number, text?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentsGet(target, targetId, page, perPage, text, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CommentsPostRequest} [apiV1CommentsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentsPost(apiV1CommentsPostRequest?: ApiV1CommentsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentsPost(apiV1CommentsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompaniesCompanyDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompaniesCompanyDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompaniesCompanyGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompaniesCompanyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesCompanyPutRequest} [apiV1CompaniesCompanyPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest?: ApiV1CompaniesCompanyPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompaniesCompanyPut(apiV1CompaniesCompanyPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [name] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompaniesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompaniesGet(page, perPage, name, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompaniesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompaniesPost(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompanyRolesCompanyRoleDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompanyRolesCompanyRoleDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompanyRolesCompanyRoleGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompanyRolesCompanyRoleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompanyRolesCompanyRolePut(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [name] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompanyRolesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompanyRolesGet(page, perPage, name, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CompanyRolesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CompanyRolesPost(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Удаляет избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FavoritesFavoriteDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FavoritesFavoriteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по избранному  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} target required|in:company,news,post,project
     * @param {object} targetId required|int|min:1
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FavoritesGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FavoritesGet(target, targetId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Создает избранное для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FavoritesPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FavoritesPost(apiV1FavoritesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FilesFileDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FilesFileDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FilesFileGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FilesFileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FilesFilePut(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FilesFilePut(apiV1FilesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FilesGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1FilesPostRequest} [apiV1FilesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FilesPost(apiV1FilesPostRequest?: ApiV1FilesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FilesPost(apiV1FilesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Удаляет подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FollowsFollowDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FollowsFollowDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по подпискам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} target required|in:company,news,post,project
     * @param {object} targetId required|int|min:1
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FollowsGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FollowsGet(target, targetId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Создает подписку для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {ApiV1FavoritesPostRequest} [apiV1FavoritesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FollowsPost(apiV1FavoritesPostRequest?: ApiV1FavoritesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FollowsPost(apiV1FavoritesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GetUserFeaturesUsageUserGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GetUserFeaturesUsageUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [name] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LanguagesGet(page: number, perPage: number, name?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LanguagesGet(page, perPage, name, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LanguagesLanguageDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LanguagesLanguageDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LanguagesLanguageGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LanguagesLanguageGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LanguagesLanguagePut(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LanguagesPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LanguagesPost(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по лайкам  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} target required|in:company,news,post,project
     * @param {object} targetId required|int|min:1
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LikesGet(target: object, targetId: object, page: number, perPage: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LikesGet(target, targetId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Удаляет лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LikesLikeDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LikesLikeDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Ставит лайк для записи целевой таблицы, если этот пользователь уже поставил лайк, то вернет ошибку  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {ApiV1LikesPostRequest} [apiV1LikesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LikesPost(apiV1LikesPostRequest?: ApiV1LikesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LikesPost(apiV1LikesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MakeOrderPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MakeOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по избранному пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {object} [target] filled|in:company,news,post,project
     * @param {object} [targetId] exclude_without:target|int|min:1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MyFavoritesGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MyFavoritesGet(page, perPage, target, targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {object} [target] filled|in:company,news,post,project
     * @param {object} [targetId] exclude_without:target|int|min:1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MyFollowsGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MyFollowsGet(page, perPage, target, targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Информация по лайкам пользователя (того кто делает запрос)  Доступные параметры: ## ?target={projects} - целевая таблица для лайков (проекты, пользователи и т.д.), по умолчанию = projects (можно не указывать, остальные пока не реализованы) ## ?target_id={id} - ИД целевой таблицы, например ИД проекта
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {object} [target] filled|in:company,news,post,project
     * @param {object} [targetId] exclude_without:target|int|min:1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MyLikesGet(page: number, perPage: number, target?: object, targetId?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MyLikesGet(page, perPage, target, targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} pageSize required|integer
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NewsGet(page: number, pageSize: number, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NewsGet(page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NewsNewsDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NewsNewsDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NewsNewsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NewsNewsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1NewsNewsPutRequest} [apiV1NewsNewsPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NewsNewsPut(apiV1NewsNewsPutRequest?: ApiV1NewsNewsPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NewsNewsPut(apiV1NewsNewsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1NewsPostRequest} [apiV1NewsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NewsPost(apiV1NewsPostRequest?: ApiV1NewsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NewsPost(apiV1NewsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrdersGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrdersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrdersOrderDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrdersOrderDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrdersOrderGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrdersOrderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrdersOrderPut(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrdersOrderPut(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1OrdersPostRequest} [apiV1OrdersPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrdersPost(apiV1OrdersPostRequest?: ApiV1OrdersPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrdersPost(apiV1OrdersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PlansGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PlansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PlansPlanDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PlansPlanDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PlansPlanGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PlansPlanGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1PlansPlanPutRequest} [apiV1PlansPlanPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PlansPlanPut(apiV1PlansPlanPutRequest?: ApiV1PlansPlanPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PlansPlanPut(apiV1PlansPlanPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1CompaniesPostRequest} [apiV1CompaniesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PlansPost(apiV1CompaniesPostRequest?: ApiV1CompaniesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PlansPost(apiV1CompaniesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostsGet(page: number, perPage: number, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostsGet(page, perPage, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1PostsPostRequest} [apiV1PostsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostsPost(apiV1PostsPostRequest?: ApiV1PostsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostsPost(apiV1PostsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostsPostDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostsPostDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [languageId] filled|int
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostsPostGet(languageId?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostsPostGet(languageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1PostsPostPutRequest} [apiV1PostsPostPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostsPostPut(apiV1PostsPostPutRequest?: ApiV1PostsPostPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostsPostPut(apiV1PostsPostPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RatesGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RatesPost(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RatesPost(apiV1RatesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RatesRateDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RatesRateDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RatesRateGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RatesRateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1RatesPostRequest} [apiV1RatesPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RatesRatePut(apiV1RatesPostRequest?: ApiV1RatesPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RatesRatePut(apiV1RatesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Редактирование профиля пользователя ## ....
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SettingsProfilePatch(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SettingsProfilePatch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1TagsDeleteRequest} [apiV1TagsDeleteRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TagsDelete(apiV1TagsDeleteRequest?: ApiV1TagsDeleteRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TagsDelete(apiV1TagsDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [target] filled|in:news,post
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TagsGet(target?: object, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TagsGet(target, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1TagsPostRequest} [apiV1TagsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TagsPost(apiV1TagsPostRequest?: ApiV1TagsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TagsPost(apiV1TagsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TransactionsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TransactionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TransactionsPost(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TransactionsPost(apiV1TransactionsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TransactionsTransactionDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TransactionsTransactionDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TransactionsTransactionGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TransactionsTransactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1TransactionsPostRequest} [apiV1TransactionsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest?: ApiV1TransactionsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1TransactionsTransactionPut(apiV1TransactionsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UploadFilePostRequest} [apiV1UploadFilePostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UploadFilePost(apiV1UploadFilePostRequest?: ApiV1UploadFilePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UploadFilePost(apiV1UploadFilePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [value] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationGet(page: number, perPage: number, value?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationGet(page, perPage, value, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [name] filled|string
     * @param {string} [systemName] filled|string
     * @param {string} [search] nullable|string
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationHeadersGet(page: number, perPage: number, name?: string, systemName?: string, search?: string, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationHeadersGet(page, perPage, name, systemName, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UserInformationHeadersPostRequest} [apiV1UserInformationHeadersPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest?: ApiV1UserInformationHeadersPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationHeadersPost(apiV1UserInformationHeadersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationHeadersUserInformationHeaderDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationHeadersUserInformationHeaderDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationHeadersUserInformationHeaderGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationHeadersUserInformationHeaderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UserInformationHeadersUserInformationHeaderPutRequest} [apiV1UserInformationHeadersUserInformationHeaderPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest?: ApiV1UserInformationHeadersUserInformationHeaderPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationHeadersUserInformationHeaderPut(apiV1UserInformationHeadersUserInformationHeaderPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationPost(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationPost(apiV1UserInformationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UserInformationUpsertPostRequest} [apiV1UserInformationUpsertPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest?: ApiV1UserInformationUpsertPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationUpsertPost(apiV1UserInformationUpsertPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationUserInformationDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationUserInformationDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationUserInformationGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationUserInformationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UserInformationPostRequest} [apiV1UserInformationPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest?: ApiV1UserInformationPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserInformationUserInformationPut(apiV1UserInformationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserSubscriptCancelPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserSubscriptCancelPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserSubscriptPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserSubscriptPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserSubscriptRenewPost(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserSubscriptRenewPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} page required|integer
     * @param {number} perPage required|integer
     * @param {string} [search] nullable|string
     * @param {boolean} [withUserInformation] filled|boolean
     * @param {string} [sortBy] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersGet(page: number, perPage: number, search?: string, withUserInformation?: boolean, sortBy?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersGet(page, perPage, search, withUserInformation, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UsersPostRequest} [apiV1UsersPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersPost(apiV1UsersPostRequest?: ApiV1UsersPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersPost(apiV1UsersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersUserDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersUserDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {boolean} [withUserInformation] filled|boolean
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersUserGet(withUserInformation?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersUserGet(withUserInformation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1UsersUserPutRequest} [apiV1UsersUserPutRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UsersUserPut(apiV1UsersUserPutRequest?: ApiV1UsersUserPutRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UsersUserPut(apiV1UsersUserPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} sortBy required|string
     * @param {number} page required|integer
     * @param {number} pageSize required|integer
     * @param {string} [search] nullable|string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WalletsGet(sortBy: string, page: number, pageSize: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WalletsGet(sortBy, page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WalletsPost(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WalletsPost(apiV1WalletsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {object} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WalletsWalletDelete(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WalletsWalletDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WalletsWalletGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WalletsWalletGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {ApiV1WalletsPostRequest} [apiV1WalletsPostRequest] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WalletsWalletPut(apiV1WalletsPostRequest?: ApiV1WalletsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WalletsWalletPut(apiV1WalletsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
